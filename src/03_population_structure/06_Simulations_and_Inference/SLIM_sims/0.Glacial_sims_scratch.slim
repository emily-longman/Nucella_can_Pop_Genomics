// Keywords: split, join, vicariance, founder, founding, merge, assimilation, admixture

initialize() {
	defineConstant("Z", 99999);       // last chromosome position

	initializeSLiMModelType("nonWF");
	initializeMutationType("m1", 0.5, "f", 0.0);
	
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, Z);
	initializeMutationRate(1.5e-6);
	initializeRecombinationRate(1e-8);

//ancestry tracking
	initializeMutationType("m2", 0.5, "f", 0.0);   // afr marker
	initializeMutationType("m3", 0.5, "f", 0.0);   // eu marker
	c(m2,m3).color = c("red","blue");
	
	defineConstant("I", 1e4);       // interval between markers

//substitution policy
	c(m1,m2,m3).convertToSubstitution = F;

}
reproduction() {
	// each subpopulation reproduces within itself
	subpop.addCrossed(individual, subpop.sampleIndividuals(1));
}
1 early() {
	// start with two subpops that grow to different sizes
	sim.addSubpop("p0", 10).setValue("K", 5000);
	sim.addSubpop("p1", 0).setValue("K", 2000);

for (i in 2:8)
		sim.addSubpop(i, 0).setValue("K", 1000);

	
	//sim.addSubpop("p3", 0).setValue("K", 900);
	//sim.addSubpop("p4", 0).setValue("K", 900);
	//sim.addSubpop("p5", 0).setValue("K", 900);
	//sim.addSubpop("p6", 0).setValue("K", 900);
	//sim.addSubpop("p7", 0).setValue("K", 900);
}




8000 early() {
	AFN = p0.individuals;
   outofafrica = sample(AFN, 10); 	
	p1.takeMigrants(outofafrica);
}



/// Markers
14900 late() {
// set up markers 
	positions = seq(from=0, to=Z, by=I);
	defineConstant("ANC", size(positions));
	catn("Modeling " + ANC + " ancestry markers.");

	for (subpop in c(p0,p1),
	     muttype in c(m2,m3),
	     symbol in c("ANC1","ANC2"))
	{
		genomes = subpop.genomes;
		muts = genomes.addNewDrawnMutation(muttype, positions);
		defineConstant(symbol, muts);
	}

}
/// Markers



15000 early() {
	AFN = p0.individuals;
	EUN = p1.individuals;

   Northern_entry = sample(EUN, 10); 	
	Southern_entry = sample(AFN, 10); 
	
	p2.takeMigrants(Northern_entry);
	p8.takeMigrants(Southern_entry);
}


//// GLOBAL CALLS

early() {
	/////density-dependent regulation for each subpop
	for (subpop in sim.subpopulations) {
		K = subpop.getValue("K");
		if(K == -1){subpop.fitnessScaling = 0.0;}
		if(K != -1){subpop.fitnessScaling = K / subpop.individualCount;}
	}
	////density-dependent regulation for each subpop


	// Conditional mugration
	EU_N = p1.individuals;
	AF_N = p0.individuals;
	if(EU_N.size() > 100 & AF_N.size() > 100 ){
	m_AtoE = rbinom(1, AF_N.size(), 0.00001);
	M_AtoE = sample(AF_N, m_AtoE); 
	p1.takeMigrants(M_AtoE);
	m_EtoA = rbinom(1, EU_N.size(), 0.0001);
	M_EtoA = sample(EU_N, m_EtoA); 
	p0.takeMigrants(M_EtoA);
	}


	/// New world migration
	ME_N = p2.individuals;
	FL_N = p8.individuals;
	if(ME_N.size() > 100 & FL_N.size() > 100 ){

	subpops = sim.subpopulations;
	SubpopID = subpops.id[2:8];
	COUNT=size(SubpopID);

	subpops = sim.subpopulations;
	for (i in 3:(COUNT+1)){
	sample_size = subpops[i-1].individuals;
	m = rbinom(1, sample_size.size(), 0.001);
	M = sample(sample_size, m);
	subpops[i].takeMigrants(M);
	} // for
 
	for (i in 3:(COUNT+1)){
	sample_size = subpops[i].individuals;
	m = rbinom(1, sample_size.size(), 0.001);
	M = sample(sample_size, m);
	subpops[i-1].takeMigrants(M);
	} // for
 
	
} // if ME_N.size() > 100 & FL_N.size() > 100


	///Reporters
	if (sim.cycle % 500 == 0 | sim.cycle == 1) {
	ME_N = p2.individuals;
	FL_N = p8.individuals;
	EU_N = p1.individuals;
	AF_N = p0.individuals;

	if(AF_N.size() > 100 ){
	thAF = calcWattersonsTheta(p0.genomes);
	reporter = "t=" + sim.cycle + ", AF Th= " + thAF;
	print(reporter);
	}

	if(ME_N.size() > 100 & FL_N.size() > 100 ){
	MEFLfst= calcFST(p2.genomes, p8.genomes);
	MEEUfst= calcFST(p2.genomes, p1.genomes);
	FLAFfst= calcFST(p8.genomes, p0.genomes);
	reporter = "t=" + sim.cycle + ", MEFL FST= " + MEFLfst+ ", MEEU FST= " + MEEUfst+ ", FLAF FST= " + FLAFfst;
	catn(reporter);
	}
	}/// reporters cycle

}



14900:16900 late() {
	if (exists("slimgui")) {
		plot = slimgui.createPlot("Local ancestry", c(0,1), c(0,1),
			xlab="Position", ylab="Ancestry fraction", width=700, height=250);
		plot.addLegend(labelSize=14, graphicsWidth=20);
		plot.legendLineEntry("p1 ancestry", "red", lwd=3);
		plot.abline(v=0.5, color="black", lwd=2);
		
		for (col in c(m2,m3).color, symbol in c("ANC1","ANC2"))
		{
			mutlist = executeLambda(symbol + ";");
			freqs = sim.mutationFrequencies(NULL, mutlist);
			plot.lines(seq(0, 1, length=size(freqs)), freqs, color=col, lwd=3);
			plot.abline(h=mean(freqs), color=col);
		}
	}
}


14900 late() {

//root = "/Users/jcnunez/Library/CloudStorage/OneDrive-UniversityofVermont/Desktop/";
fst = calcFST(p0.genomes, p1.genomes);
het1 = calcHeterozygosity(p0.genomes);
het2 = calcHeterozygosity(p1.genomes);

writeFile(
	paste(root, "/", "FST", "." , sim.cycle,".txt", sep=""),
	paste(fst, het1, het2, sep = ","),
	append=T);

}

16900 late() {

	subpops = sim.subpopulations;
	SubpopID = subpops.id;
	COUNT=size(SubpopID);

	//root = "/Users/jcnunez/Library/CloudStorage/OneDrive-UniversityofVermont/Desktop/";

	for (i in 0:(COUNT-1)){
	Mut4Freq = sim.mutationFrequencies(subpops[i],sim.mutationsOfType(m1));	
	writeFile(
	paste(root, "/", "Agnostic.",repId,".pop.", i , "." , sim.cycle,".txt", sep=""),
	paste(Mut4Freq),
	append=F);
	}//for loop

	for (i in 0:(COUNT-1)){
	AFRFreq = sim.mutationFrequencies(subpops[i],sim.mutationsOfType(m2));	
	writeFile(
	paste(root, "/", "AFR.",repId,".pop.", i , "." , sim.cycle,".txt", sep=""),
	paste(AFRFreq),
	append=F);
	}//for loop


 }
